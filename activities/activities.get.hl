
/*
 * Template for HTTP GET CRUD requests.
 * This file was automatically generated using Magic's CRUDifier.
 */
.arguments
   limit:long
   offset:long
   order:string
   direction:string
   operator:string
   activities.activity_id.eq:long
   activities.contact_id.eq:long
   activities.type.like:string
   activities.type.eq:string
   activities.created.eq:date
   activities.description.like:string
   activities.description.eq:string
   activities.username.like:string
   activities.username.eq:string
   activities.done.eq:bool
   contact_id.name.eq:string
   contact_id.name.like:string
.description:Returns items from your activities table in your [generic|aista-crm] database according to the specified arguments
.type:crud-read
.handling
   activities.description:textarea

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root, admin, account_manager

// Sanity checking invocation.
validators.enum:x:@.arguments/*/operator
   .:or
   .:and

/*
 * Checking if user supplied an [operator] argument, and if so
 * changing the boolean operator for comparison operations.
 */
if
   exists:x:@.arguments/*/operator
   .lambda

      // User provided a boolean comparison [operator] argument.
      set-name:x:../*/data.connect/*/data.read/*/where/0
         get-value:x:@.arguments/*/operator

// Opening up our database connection.
data.connect:[generic|aista-crm]

   // Checking if caller wants to filter according to done.
   if
      eq:x:@.arguments/*/activities.done.eq
         .:bool:true
      .lambda
         add:x:@data.connect/*/data.read/*/where/*/and
            .
               activities.closed.neq
         remove-nodes:x:@.arguments/*/activities.done.eq
   else-if
      eq:x:@.arguments/*/activities.done.eq
         .:bool:false
      .lambda
         add:x:@data.connect/*/data.read/*/where/*/and
            .
               activities.closed.eq
         remove-nodes:x:@.arguments/*/activities.done.eq

   // Parametrising our read invocation.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/operator
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:activities
         join:contacts
            as:contact_id
            type:left
            on
               and
                  activities.contact_id:contact_id.contact_id
      columns
         activities.activity_id
         activities.contact_id
         activities.type
         activities.created
         activities.description
         activities.username
         activities.closed
         activities.due
         contact_id.name
            as:contact_id.name
      where
         and

   // Adding done projections.
   for-each:x:@data.read/*
      if
         null:x:@.dp/#/*/closed
         .lambda
            add:x:@.dp/#
               .
                  done:bool:false
      else
         add:x:@.dp/#
            .
               done:bool:true

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
