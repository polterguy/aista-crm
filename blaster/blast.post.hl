
// Blast emails to specified recipients.
.arguments
   title:string
   content:string
   segmentation:string
.description:Blast specified email to specified recipients

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root, admin

// Applying arguments to [fork] invocation.
insert-before:x:./*/fork/0
   get-nodes:x:@.arguments

// Creating a new thread to execute blast on.
fork

   // Opening up database connection
   data.connect:robo-crm

      // Iterating for as long as we have contacts.
      .continue:bool:true
      .offset:int:0
      while:x:@.continue

         // Checking if we've got segmentation argument.
         if
            and
               exists:x:@.arguments/*/segmentation
               not-null:x:@.arguments/*/segmentation
            .lambda
               unwrap:x:+/*/*
               add:x:@while/*/data.read/*/where/*/and
                  .
                     source.eq:x:@.arguments/*/segmentation
         data.read
            table:contacts
            columns
               name
               email
            where
               and
                  email.neq
                  subscriber.neq
                  subscriber.neq:int:0
                  confirmed.neq
                  confirmed.neq:int:0
            offset:x:@.offset
            limit:10

         // Checking if we've got more items in contacts table.
         if
            exists:x:@data.read/*
            .lambda

               /*
                * Incrementing offset such that in our next [while] iteration
                * we're retrieving next batch of contacts.
                */
               set-value:x:@.offset
                  math.add:x:@.offset
                     get-count:x:@data.read/*

               // Iterating through each contact returned from above invocation to [data.read].
               for-each:x:@data.read/*

                  // Parametrising template fields in email for currently iterated contact.
                  .subject
                  .body
                  set-value:x:@.subject
                     strings.replace:x:@.arguments/*/title
                        .:[name]
                        get-value:x:@.dp/#/*/name
                  set-value:x:@.body
                     strings.replace:x:@.arguments/*/content
                        .:[name]
                        get-value:x:@.dp/#/*/name

                  // Parametrising invocation to [mail.smtp.send].
                  unwrap:x:+/*/**
                  add:x:@.lambda/*/mail.smtp.send
                     .
                        message
                           to
                              .
                                 name:x:@.dp/#/*/name
                                 email:x:@.dp/#/*/email
                           subject:x:@.subject
                           entity:text/html
                              content:x:@.body

               // Sending emails to currently selected contacts.
               mail.smtp.send
         else

            // Stopping while loop.
            set-value:x:@.continue
               .:bool:false

            // Logging information.
            strings.concat
               .:"Robo CRM - "
               get-value:x:@.offset
               .:" emails blasted"
            log.info:x:-
               source:blaster

            // Publishing socket message in case we've got listeners.
            strings.concat
               get-value:x:@.offset
               .:" emails sent in blast"
            unwrap:x:+/*/*/message
            sockets.signal:robo-crm.system
               roles:root, admin, account_manager
               args
                  message:x:@strings.concat

// Returning success to caller.
return
   result:success
