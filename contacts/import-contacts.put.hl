
/*
 * Import contacts endpoint for importing CSV files containing contacts.
 */
.arguments
   file
      name:string
      stream:*

// Verifying user has access to invoke endpoint.
auth.ticket.verify:root, admin, account_manager

// Opening up and loading stream.
io.stream.read:x:@.arguments/*/file/*/stream

// Converting CSV content to lambda object.
convert:x:-
   type:string
csv2lambda:x:-

// Used for counting imported and skipped items.
.imported:long:0
.skipped:long:0

// Opening up database connection.
data.connect:aista-crm

   // Looping through each CSV record.
   for-each:x:@csv2lambda/*
   
      // Sanity checking that we've at the very least got email in our record.
      if
         and
            exists:x:@.dp/#/*/email
            not-null:x:@.dp/#/*/email
         .lambda

            // Verifying contact does not exist from before.
            data.read
               table:contacts
               values
                  contact_id
               where
                  and
                     email.eq:x:@.dp/#/*/email
            if
               not-exists:x:@data.read/*
               .lambda

                  // Defaulting [source] to "imported", unless explicitly given.
                  if
                     not-exists:x:@.dp/#/*/source
                     .lambda
                        add:x:@.dp/#
                           .
                              source:imported

                  // Making sure we create a DateTime object out of [created] if specified.
                  if
                     and
                        exists:x:@.dp/#/*/created
                        not-null:x:@.dp/#/*/created
                     .lambda
                        set-value:x:@.dp/#/*/created
                           strings.replace:x:@.dp/#/*/created
                              .:T
                              .:" "
                        strings.split:x:@.dp/#/*/created
                           .:+
                        set-value:x:@.dp/#/*/created
                           get-value:x:@strings.split/0
                        set-value:x:@.dp/#/*/created
                           convert:x:@.dp/#/*/created
                              type:date

                  // Parametrising [data.create] invocation and importing iterated record.
                  add:x:./*/data.create/*/values
                     get-nodes:x:@.dp/#/*/email
                     get-nodes:x:@.dp/#/*/name
                     get-nodes:x:@.dp/#/*/phone
                     get-nodes:x:@.dp/#/*/country
                     get-nodes:x:@.dp/#/*/city
                     get-nodes:x:@.dp/#/*/linkedIn
                     get-nodes:x:@.dp/#/*/meta
                     get-nodes:x:@.dp/#/*/created
                     get-nodes:x:@.dp/#/*/source
                     get-nodes:x:@.dp/#/*/description
                  data.create
                     table:contacts
                     values
                  math.increment:x:@.imported
            else
               math.increment:x:@.skipped
      else
         math.increment:x:@.skipped

// Doing some logging.
auth.ticket.get
strings.concat
   .:"Aista CRM - "
   get-value:x:@.imported
   .:" contacts imported"
log.info:x:-
   imported:x:@.imported
   skipped:x:@.skipped
   username:x:@auth.ticket.get

// Returning success to caller.
unwrap:x:+/*
return
   imported:x:@.imported
   skipped:x:@.skipped

