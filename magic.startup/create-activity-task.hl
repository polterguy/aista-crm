
/*
 * Creates a task that runs periodically, to check the next upcoming activities,
 * and notify user both on email and in UI that task is due.
 */

// Ensuring we delete previously created task with the same name.
tasks.list:aista-crm.tasks.ticker
if
   mt
      get-count:x:@tasks.list/*
      .:int:0
   .lambda
      tasks.delete:aista-crm.tasks.ticker

// Creating new task.
tasks.create:aista-crm.tasks.ticker
   description:Task that informs users about their next upcoming activities
   repeats:5.minutes
   .lambda

      // Finding date and time offset for which activities to select.
      .max
      .min
      set-value:x:@.max
         math.add
            date.now
            time
               minutes:9
      set-value:x:@.min
         date.now

      // Finding tasks that are due in the next 8 minutes.
      data.connect:aista-crm
         data.read
            table:activities
            columns
               type
               due
               username
               description
               contact_id
            where
               and
                  or
                     closed.eq
                     closed.eq:bool:false
                     closed.eq:int:0
                  due.lt:x:@.max
                  due.mt:x:@.min
            limit:-1
            order:due

         // Looping through each activity resulting from above invocation.
         for-each:x:@data.read/*

            // Sending user an email about upcoming activity.
            .data
               type:x:@.dp/#/*/type
               due:x:@.dp/#/*/due
               username:x:@.dp/#/*/username
               description:x:@.dp/#/*/description
               contact_name
            unwrap:x:-/*

            // Retrieving contact name is activity is associated with a contact.
            if
               not-null:x:@.dp/#/*/contact_id
               .lambda
                  data.read
                     table:contacts
                     columns
                        name
                     where
                        and
                           contact_id.eq:x:@.dp/#/*/contact_id
                  set-value:x:@.data/*/contact_name
                     get-value:x:@data.read/*/*/name

            // Dynamically creating message for user.
            .message:Upcoming activity
            if
               not-null:x:@.data/*/contact_name
               .lambda
                  set-value:x:@.message
                     strings.concat
                        get-value:x:@.message
                        .:" with "
                        get-value:x:@.data/*/contact_name

            // Adding time to message.
            set-value:x:@.message
               strings.concat
                  get-value:x:@.message
                  .:" in less than 10 minutes from now"

            // Signaling user over socket connection.
            unwrap:x:+/*/args/**
            sockets.signal:aista-crm.system
               users:x:@.dp/#/*/username
               args
                  message:x:@.message

            // Verifying cloudlet has configured SMTP settings.
            config.get:"magic.smtp.host"
            if
               not-null:x:@config.get
               .lambda

                  // Sending user an email about activity if user has an email address configured.
                  data.connect:[generic|magic]
                     data.read
                        table:users_extra
                        columns
                           type
                           value
                        where
                           and
                              user.eq:x:@.data/*/username
                              or
                                 type.eq:email
                                 type.eq:name

                     // Verifying that user has an email address.
                     if
                        not-null:x:@data.read/*/*/type/=email/./*/value
                        .lambda

                           // Sending user email about activity.
                           unwrap:x:+/**
                           mail.smtp.send
                              message
                                 to
                                    .
                                       name:x:@data.read/*/*/type/=name/./*/value
                                       email:x:@data.read/*/*/type/=email/./*/value
                                 subject:Upcoming activity
                                 entity:text/plain
                                    content:x:@.message
